haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.

haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.
haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.haha love love aaaaaa Return Value

The view object that is the farthest descendent the current view and contains point. Returns nil if the point lies completely outside the receivers view hierarchy.

Discussion

This method traverses the view hierarchy by calling the pointInside:withEvent: method of each subview to determine which subview should receive a touch event. If pointInside:withEvent: returns YES, then the subviews hierarchy is similarly traversed until the frontmost view containing the specified point is found. If a view does not contain the point, its branch of the view hierarchy is ignored. You rarely need to call this method yourself, but you might override it to hide touch events from subviews.

This method ignores view objects that are hidden, that have disabled user interactions, or have an alpha level less than . This method does not take the views content into account when determining a hit. Thus, a view can still be returned even if the specified point is in a transparent portion of that views content.

Points that lie outside the receivers bounds are never reported as hits, even if they actually lie within one of the receivers subviews. This can occur if the current views clipsToBounds property is set to NO and the affected subview extends beyond the views bounds.


